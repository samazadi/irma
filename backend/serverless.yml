service:
  name: irma

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    httpPort: 3333
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      groups:
        sources:
          - table: ${self:provider.environment.IRMA_DDB_TABLE}
            sources: [./seeds/books.json]
          - table: ${self:provider.environment.IRMA_ACTIVITIES_DDB_TABLE}
            sources: [./seeds/book_activities.json]

    stages:
      - dev

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    IRMA_DDB_TABLE: irma-dev
    IRMA_ACTIVITIES_DDB_TABLE: irma-activities-dev

functions:
  createBook:
    handler: src/api/createBook.handler
    events:
      - http:
          method: post
          path: library
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_DDB_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_ACTIVITIES_DDB_TABLE}
  
  getBooks:
    handler: src/api/getBook.handler
    events:
      - http:
          method: get
          path: library/{id} # id of last item, used for pagination
          cors: true
      - http:
          method: get
          path: library
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_DDB_TABLE}

  searchBooks:
    handler: src/api/searchBook.handler
    events:
      - http:
          method: get
          path: library/search/{type}/{id}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_DDB_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_DDB_TABLE}/index/IsbnIndex
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_DDB_TABLE}/index/AuthorIndex
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_DDB_TABLE}/index/TitleIndex

  updateBook:
    handler: src/api/updateBook.handler
    events:
      - http:
          method: post
          path: library/update
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_DDB_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_ACTIVITIES_DDB_TABLE}

  deleteBook:
    handler: src/api/deleteBook.handler
    events:
      - http:
          method: delete
          path: library/{id}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_DDB_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_ACTIVITIES_DDB_TABLE}

  getBookActivities:
    handler: src/api/getBookActivities.handler
    events:
      - http:
          method: get
          path: library/activities/{bookId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.IRMA_ACTIVITIES_DDB_TABLE}/index/BookIdIndex

resources:
  Resources:
    IrmaDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.IRMA_DDB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: isbn
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: author
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: IsbnIndex
            KeySchema:
              - AttributeName: isbn
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          
          - IndexName: TitleIndex
            KeySchema:
              - AttributeName: title
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          
          - IndexName: AuthorIndex
            KeySchema:
              - AttributeName: author
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    IrmaActivitiesDDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.IRMA_ACTIVITIES_DDB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: BookIdIndex
            KeySchema:
              - AttributeName: bookId
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
